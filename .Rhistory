file<- paste(getwd(), "/household_power_consumption.txt",sep="")
file
dat <- fread("household_power_consumption.txt", skip = grep("^[1,2]/2/2017",readLines(file))[1]-1,
nrows= grep("3/2/2007", file)[1] - grep("1/2/2007", file)[1])
grep("^[1,2]/2/2017",readLines(file))[1]-1
grep("^[1-2]/2/2017",readLines(file))[1]-1
grep("^1/2/2017",readLines(file))[1]-1
grep("^[1/2/2017]",readLines(file))[1]-1
grep("1/2/2017",readLines(file))[1]-1
grep("1/2/2017",readLines(file))
file
readLines(file)
dat <- fread("household_power_consumption.txt", skip = grep("^[1,2]/2/2007",readLines(file))[1]-1,
nrows= (grep("3/2/2007", file)[1] - grep("1/2/2007", file)[1])  )
dat
nrow(dat)
dat <- fread("household_power_consumption.txt", skip = grep("^[1,2]/2/2007",readLines(file))[1]-1,
nrow= (grep("3/2/2007", file)[1] - grep("1/2/2007", file)[1]))
dat
nrow(dat)
(grep("3/2/2007", file)[1] - grep("1/2/2007", file)[1])
grep("3/2/2007", file)
grep("3/2/2007", file)
grep("^[1,2]/2/2007",readLines(file))
dat <- fread("household_power_consumption.txt", skip = grep("^[1,2]/2/2007",readLines(file))[1]-1,
nrow= (grep("3/2/2007", readLines(file))[1] - grep("1/2/2007", readLines(file))[1]))
dat
dat <- fread("household_power_consumption.txt", header = T, skip = grep("^[1,2]/2/2007",readLines(file))[1]-1,
nrow= (grep("3/2/2007", readLines(file))[1] - grep("1/2/2007", readLines(file))[1]))
colnam<- readLines(file)[1]
colnam<- readLines(file,n=1)
colnam
colnam<- str_split(readLines(file,n=1),";")
colnam
colnam<- unlist(str_split(readLines(file,n=1),";"))
colnam
colnames(dat)<- colnam
library(stringr)
library(lubridate)
dat$Date <- dmy(dat$Date)
lapply(dat, function(x) x[x=="?"]<-NA )
lapply(dat, function(x) x )
lapply(dat, function(x) x[x=="?"] )
lapply(dat[,2:], function(x) x[x=="?"]<-NA )
lapply(dat[,2:length(dat)], function(x) x[x=="?"]<-NA )
dat1<- lapply(dat[,2:length(dat)], function(x) x[x=="?"]<-NA )
dat1
lapply(dat[,2:length(dat)], function(x) x[x=="?"])
View(dat)
countries = ['Canada', 'Mexico', 'Brazil', 'Chile', 'Denmark', 'Botswana', 'Spain', 'Britain', 'Portugal', 'Russia', 'Thailand', 'Bangladesh', 'Nigeria', 'Argentina', 'Belarus', 'Laos', 'Australia', 'Panama', 'Egypt', 'Morocco', 'Switzerland', 'Belgium']
reticulate::repl_python()
reticulate::repl_python()
countries = ['Canada', 'Mexico', 'Brazil', 'Chile', 'Denmark', 'Botswana', 'Spain', 'Britain', 'Portugal', 'Russia', 'Thailand', 'Bangladesh', 'Nigeria', 'Argentina', 'Belarus', 'Laos', 'Australia', 'Panama', 'Egypt', 'Morocco', 'Switzerland', 'Belgium']
b_countries= filter(lambda x: True if "b" in x , countries)
b_countries= filter(lambda x: True if "b" in str(x) , countries)
b_countries= filter(lambda x: True (if "b" in str(x)) , countries)
b_countries= filter(lambda x: True (if "b" in x) , countries)
b_countries= filter(lambda x: True  , countries)
print(b_countries)
b_countries= filter(lambda x: True  , countries)
print(b_countries)
b_countries= filter(lambda x: x  , countries)
print(b_countries)
quit
if !(file.exists()){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
dest<- getwd()
download.file(url,dest)
}
dest
download.file(url,dest)
download.file(url,getwd())
getwd()
dest<- paste(getwd(),"/FinalProjectCD/data.zip"
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
dest<- paste(getwd(),"/FinalProjectCD/data.zip",sep="")
if !(file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,getwd())
}
download.file(url,getwd())
if !(file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
file.exists(dest)
if (!file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
options(download.file.method="libcurl")
download.file(url,dest)
if (!file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
file.exists(dest)
(!file.exists(dest))
file.exists(dest)
download.file(url,dest)
if (!file.exists(dest)){
url<- "http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
library(tidyverse)
library(stringr)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
des<- paste(getwd(),"/FP.zip",sep="" )
download.file(url,des)
dest<- paste(getwd(), "/FinalProjectCD/FP.zip")
dest<- paste(getwd(), "/FinalProjectCD/FP.zip")
if (!file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
dest<- paste(getwd(), "/FinalProjectCD/FP.zip",sep="")
if (!file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
}
download.file(url,dest)
unzip(dest)
unzip(dest)
zip.unpack(dest,dest = paste(getwd(),"/FinalProjectCD/",sep="" ))
unzip(dest,dest = paste(getwd(),"/FinalProjectCD/",sep="" ))
unzip(dest,paste(getwd(),"/FinalProjectCD/",sep="" ))
unzip(zipfile = dest,paste(getwd(),"/FinalProjectCD/",sep="" ))
unzip(-dest, exdir = paste(getwd(),"/FinalProjectCD/",sep="" ))
unzip(dest, exdir = paste(getwd(),"/FinalProjectCD/",sep="" ))
paste(getwd(),"/FinalProjectCD/",sep="" )
unzip(dest, exdir = paste(getwd(),"/FinalProjectCD",sep="" ))
a<- unzip(dest, exdir = paste(getwd(),"/FinalProjectCD",sep="" ))
a
str_extract_all("[^/.*.txt]" ,a[0])
a[0]
a
class(a)
str_extract_all("[^/.*.txt]" , a )
a[[0]]
a
str_extract_all("[^/.*.txt] " , a )
a <- str_split(a, " ")
a
a <- str_split(a, "  ")
a<- unzip(dest, exdir = paste(getwd(),"/FinalProjectCD",sep="" ))
str_split(b, "  ")
b<-a
str_split(b, "  ")
c[[1]]
c[1]
class(c)
t
c_s <- str_split(b, "  ")
c
c_s
c_s[1]
c_s[[1]]
str_extract_all("[^/.*.txt] " , c_s[[1]] )
newdir<- paste(getwd(),"/FinalProjectCD",sep="" )
newdir
list.files(newdir)
file.remove(dest)
b<-list.files(newdir)
setwd(list.files(newdir))
dest<- paste(getwd(), "/FinalProjectCD/FP.zip",sep="")
if (!file.exists(dest)){
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
newdir<- paste(getwd(),"/FinalProjectCD",sep="" )
a<- unzip(dest, exdir = newdir)
file.remove(dest)
setwd(list.files(newdir))
}
download.file(url,dest)
download.file(url,dest)
download.file(url,newdir)
download.file(url,dest)
dest<- paste(getwd(), "/FinalProjectCD/FP.zip",sep="")
file.exists(dest)
url<- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
url<- "http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
setwd("~/")
setwd("~/")
dest<- paste(getwd(), "/FinalProjectCD/FP.zip",sep="")
if (length(list.files(dest)) ==0 ){
url<- "http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,dest)
newdir<- paste(getwd(),"/FinalProjectCD",sep="" )
a<- unzip(dest, exdir = newdir)
file.remove(dest)
setwd(list.files(newdir))
}
train_dest<- paste(getwd(), "/train",sep="")
test_dest<- paste(getwd(), "/test",sep="")
library(data.table)
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""))
train_X
View(train_X)
View(train_X)
ncol(train_X)
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""))
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""))
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""))
list.files(newdir)
setwd(list.files(newdir))
newdir
setwd(paste( newdir, "/" ,list.files(newdir),sep="")
} ### If new directory is empty, download the zip file, unzip it, and set the extracted carpet as wd.
### make a variable with the name of the test and train folders
train_dest<- paste(getwd(), "/train",sep="")
test_dest<- paste(getwd(), "/test",sep="")
### read file with features names
features_n <- fread(file= )
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = )
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""))
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""))
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""))
setwd(paste( newdir, "/" ,list.files(newdir),sep="")
} ### If new directory is empty, download the zip file, unzip it, and set the extracted carpet as wd.
### make a variable with the name of the test and train folders
train_dest<- paste(getwd(), "/train",sep="")
test_dest<- paste(getwd(), "/test",sep="")
### read file with features names
features_n <- fread(file= )
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = )
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""))
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""))
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""))
setwd(paste( newdir, "/" ,list.files(newdir),sep="")
setwd(paste( newdir, "/" ,list.files(newdir),sep=""))
list.files(newdir)
paste( newdir, "/" ,list.files(newdir),sep="")
setwd(paste( newdir, "/" ,list.files(newdir),sep="") )
### read file with features names
features_n <- fread(file= paste(getwd(),"/features.txt",sep="" ))
features_n
### read file with features names
features_n <- fread(file= paste(getwd(),"/features.txt",sep="" ))[2]
features_n
### read file with features names
features_n <- fread(file= paste(getwd(),"/features.txt",sep="" ))[,2]
features_n
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = features_n)
features_n
class(features_n)
class(features_n[,1])
features_n
class(features_n$V2)
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = features_n$V2  )
train_X
names(train_X)
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""), col.names = features_n$V2  )
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""), col.names = features_n$V2  )
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""), col.names = features_n$V2  )
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = features_n$V2  )
train_y
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = features_n$V2  )
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""), col.names = "activity"  )
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""), col.names = features_n$V2  )
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""), col.names = "activity" )
fread(file= paste(getwd(),"/activity_labels.txt",sep="" ) )[,2]
### read file with features names, and levels of ".*y$" data.frames
features_n <- fread(file= paste(getwd(),"/features.txt",sep="" ))[,2]
levels_y <- fread(file= paste(getwd(),"/activity_labels.txt",sep="" ) )[,2]
levels_y$V2
train_y
train_y$activity
factor(train_y$activity)
levels_y$V2
### set levels of ".*y$" data.frames
train_y$activity<- relevel(factor(train_y$activity), levels_y$V2)
test_y$activity<- relevel(factor(test_y$activity), levels_y$V2)
### set levels of ".*y$" data.frames
train_y$activity<- factor(factor(train_y$activity), levels = levels_y$V2)
test_y$activity<- factor(factor(test_y$activity),levels =  levels_y$V2)
test_y$activity
factor(train_y$activity)
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""), col.names = "activity" )
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""), col.names = "activity" )
factor(train_y$activity)
factor(factor(train_y$activity), levels = levels_y$V2)
levels_y$V2
### set levels of ".*y$" data.frames
train_y$activity<- factor(train_y$activity, levels =  levels_y$V2)
train_y
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""), col.names = "activity" )
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""), col.names = "activity" )
levels_y$V2
levels(train_y$activity)
### set levels of ".*y$" data.frames
train_y$activity<- factor(train_y$activity)
### set levels of ".*y$" data.frames
train_y$activity<- factor(train_y$activity)
test_y$activity<- factor(test_y$activity)
levels(train_y$activity) <- levels_y$V2
levels(test_y$activity)<- levels_y$V2
train_y$activity
### read relevant txt with fread and
train_X <- fread(file=paste(train_dest, "/X_train.txt",sep=""), col.names = features_n$V2  )
train_y <- fread(file=paste(train_dest, "/y_train.txt",sep=""), col.names = "activity" )
test_X <- fread(file=paste(test_dest, "/X_test.txt",sep=""), col.names = features_n$V2  )
test_y <- fread(file=paste(test_dest, "/y_test.txt",sep=""), col.names = "activity" )
### set levels of ".*y$" data.frames
train_y$activity<- factor(train_y$activity)
test_y$activity<- factor(test_y$activity)
test_y$activity
train_y$activity
levels(train_y$activity) <- levels_y$V2
levels(test_y$activity)<- levels_y$V2
full_join(train_X,test_X)
?full_join
rbind(train_X,test_X,)
rbind(train_X,test_X)
nrow(rbind(train_X,test_X))
nrow(rbind(train_X,test_X))
nrow(train_X)
nrow(rbind(train_X[,-1],test_X))
names(train_X) == names(test_X)
all(names(train_X) == names(test_X))
### merge columns
all.equal(names(train_X),names(test_X))
X<- rbind(train_X,test_X)
y<- rbind(train_y,test_y)
y
X
lower(features_n$V2)
tolower(features_n$V2)
### select measurements with SD or mean
str_detect(tolower(features_n$V2),"mean|std")
### select measurements with SD or mean
X<- X[,str_detect(tolower(features_n$V2),"mean|std")]
y<- y[,str_detect(tolower(features_n$V2),"mean|std")]
X
y
X<- rbind(train_X,test_X)
y<- rbind(train_y,test_y)
y
y[,str_detect(tolower(features_n$V2),"mean|std")]
y
X
### select measurements with SD or mean
X<- X[,str_detect(tolower(features_n$V2),"mean|std")]
X
X[,str_detect(tolower(features_n$V2),"mean|std")]
X<- rbind(train_X,test_X)
X[,str_detect(tolower(features_n$V2),"mean|std")]
X
names(X)
str_detect(tolower(features_n$V2),"mean|std")
X[,str_detect(tolower(features_n$V2),"mean|std")]
X[,which(str_detect(tolower(features_n$V2),"mean|std"))]
which(str_detect(tolower(features_n$V2),"mean|std"))
class(X)
X[,1]
which(str_detect(tolower(features_n$V2),"mean|std"))
X[,c(1,2)]
### select measurements with SD or mean
X<- X[,as.vector(which(str_detect(tolower(features_n$V2),"mean|std")))]
X
X<- rbind(train_X,test_X)
as.vector(which(str_detect(tolower(features_n$V2),"mean|std")))
class(as.vector(which(str_detect(tolower(features_n$V2),"mean|std"))))
class(str_detect(tolower(features_n$V2),"mean|std"))
class(c(1,2))
### select measurements with SD or mean
X[,str_detect(tolower(features_n$V2),"mean|std")]
### select measurements with SD or mean
X %>% filter(str_extract_all(tolower(features_n$V2),"mean|std"))
str_extract_all(tolower(features_n$V2),"mean|std")
### select measurements with SD or mean
X %>% filter(str_extract(tolower(features_n$V2),"mean|std"))
### select measurements with SD or mean
X %>% filter(str_locate(tolower(features_n$V2),"mean|std"))
str_locate(tolower(features_n$V2),"mean|std")
str_match(tolower(features_n$V2),"mean|std")
### select measurements with SD or mean
X %>% filter(str_detect(tolower(features_n$V2),"mean|std"))
grep(tolower(features_n$V2),"mean|std")
grepl(tolower(features_n$V2),"mean|std")
### select measurements with SD or mean
grepl(tolower(features_n$V2),"mean|std")
### select measurements with SD or mean
str_extract_all(tolower(features_n$V2),"mean|std")
X %>% filter(str_detect(tolower(features_n$V2),"mean|std"))
X[,str_detect(tolower(features_n$V2),"mean|std")]
X %>% filter(contains("mean|std"))
contains("mean|std")
X %>% filter(contains("mean|std"))
X %>% select(contains("mean|std"))
contains("mean|std")
X %>% select(contains("mean|std"))
X
X<- rbind(train_X,test_X)
y<- rbind(train_y,test_y)
X
X %>% select(contains("mean|std"))
X %>% select(str_detect("mean|std"))
X %>% select(str_detect(., "mean|std"))
X %>% select(contains( "std"))
X %>% select(contains("std"),contains("mean"))
### select measurements with SD or mean
X<- X %>% select(contains("std"),contains("mean"))
names(X)
### Summary by activity
data<- cbind(X,y)
summ<- data %>% group_by(activity)
summ<- data %>% group_by(activity) %>% mutate_all(mean_activity= mean())
summ<- data %>% group_by(activity) %>% mutate_all(mean)
summ
View(summ)
summ<- data %>% group_by(activity) %>% mutate_each(funs(mean_activity= mean(.)))
?across
summ<- data %>% group_by(activity) %>% across(list(mean=mean()))
summ<- data %>% group_by(activity) %>% summarise(across(list(mean=mean())))
summ<- data %>% group_by(activity) %>% summarise(across(),list(mean=mean()), .names= "{col}.{fn}")
summ<- data %>% group_by(activity) %>% summarise(across(contains("[a-z]")),list(mean=mean()), .names= "{col}.{fn}")
summ<- data %>% group_by(activity) %>% summarise(across(contains("[a-z]")),list(mean=mean), .names= "{col}.{fn}")
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains("[a-z]"),list(mean=mean), .names= "{col}.{fn}"))
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains("[a-z]"),list(mean=mean), .names= "mean_{col}"))
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains("[a-z]"),list(mean), .names= "mean_{col}"))
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains("\D"),list(mean), .names= "mean_{col}"))
summ<- data %>% group_by(activity) %>% summarise(across(contains("\\D"),list(mean), .names= "mean_{col}"))
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains("\\d"),list(mean), .names= "mean_{col}"))
summ
summ<- data %>% group_by(activity) %>% summarise(across(contains(""),list(mean), .names= "mean_{col}"))
summ<- data %>% group_by(activity) %>% summarise(across(list(mean), .names= "mean_{col}"))
summ<- data %>% group_by(activity) %>%
summarise(across(`tBodyAcc-std()-X`:`angle(Z,gravityMean)`,list(mean), .names= "mean_{col}"))
summ
nrow(summ)
?summarise
summ
left_join(data,summ,by="activity")
nrow(left_join(data,summ,by="activity"))
View(left_join(data,summ,by="activity"))
names(data)<- str_replace_all(names(data),"()","")
names(data)
str_replace_all(names(data),"()","")
str_replace_all(names(data),"()","")
str_replace_all(names(data),"()","")
str_replace_all(names(data),pattern="()",replace="")
str_replace_all(names(data)[71],pattern="()",replace="")
names(data)[71]
str_replace_all(names(data)[71],pattern="()",replace="")
"()" in names(data)[71]
names(data)[71]
str_detect(names(data)[71], "()")
str_replace(names(data)[71], "()")
str_replace(names(data)[71], "()","")
names(data)[71]
str_replace(names(data)[71], "f","")
str_replace(names(data)[71], "()","")
str_replace(names(data)[71], "( )","")
str_replace(names(data)[71], "(","")
str_replace(names(data)[71], "\(\)","")
str_replace(names(data)[71], "\( \)","")
str_replace(names(data)[71], "(","")
str_replace(names(data)[71], "\(\)","")
str_replace(names(data)[71], "/(/)","")
names(data)<- str_replace_all(names(data)[71],pattern="\\(\\)",replace="")
str_replace_all(names(data)[71],pattern="\\(\\)",replace="")
names(data)<- str_replace_all(names(data),pattern="\\(\\)",replace="")
names(data)
names(data)<- str_replace_all(names(data),pattern="\\-",replace="")
names(data)
### Make descriptive variable names
data<- cbind(X,y) ### making a single dataset
names(data)<- str_replace_all(names(data),pattern="\\(\\)",replace="")
names(data)<- str_replace_all(names(data),pattern="\\-",replace="_")
names(data)
options(Encoding="UTF-8")
options(Encoding="UTF-8")
options(encoding = 'UTF-8')
options(encoding = 'UTF-8')
render('C:/Users/Level up coaching/Documents/FinalProjectCD/UCI HAR Dataset/README.Rmd',  encoding = 'UTF-8')
library(rmarkdown)
render('C:/Users/Level up coaching/Documents/FinalProjectCD/UCI HAR Dataset/README.Rmd',  encoding = 'UTF-8')
render('C:/Users/Level up coaching/Documents/FinalProjectCD/UCI HAR Dataset/README.Rmd',  encoding = 'latin1')
knitr_options(opts_knit = list(encoding="UTF-8"))
knitr_options(opts_knit = list(encoding="UTF-8"))
knitr_options(opts_knit )
opts_knit$set
knitr::opts_knit$set
library(rmarkdown)
library(rmarkdown)
library(knitr)
?opts_knit
?opts_knit$set
?knit
knitr::opts_knit$set(encoding="UTF-8")
render(encoding = "UTF-8")
